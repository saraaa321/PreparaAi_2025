import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import logo from "../../assets/logo.png"; 
import "../css/Reacoes.css"; 
import "../Quimica.jsx"; 

const plantaeData = [
        {
          id: "ph",
          titulo: "üå°Ô∏è O que √© pH?",
          imagem: "https://media.istockphoto.com/id/997087002/pt/vetorial/the-science-ph-scale.jpg?s=612x612&w=0&k=20&c=ghn4HEJCHD7rLa8yc_rmY7er0rLa8Z4RqqqG076imFo=",
          aba1Titulo: "Defini√ß√£o e Escala",
          aba1Conteudo:
            "O pH √© uma escala que mede a concentra√ß√£o de √≠ons hidrog√™nio (H‚Å∫) em uma solu√ß√£o, indicando se ela √© √°cida, neutra ou b√°sica. √â uma medida essencial para entender rea√ß√µes qu√≠micas, biol√≥gicas e processos ambientais.",
          aba2Titulo: "Escala de pH",
          aba2Conteudo: [
            "A escala de pH varia de 0 a 14:",
            "- **pH < 7**: Solu√ß√£o √°cida (ex: suco de lim√£o, vinagre).",
            "- **pH = 7**: Solu√ß√£o neutra (ex: √°gua pura).",
            "- **pH > 7**: Solu√ß√£o b√°sica ou alcalina (ex: soda c√°ustica, am√¥nia).",
            "Quanto menor o pH, maior a acidez da solu√ß√£o. Quanto maior o pH, mais b√°sica ela √©.",
          ],
          aba3Titulo: "Import√¢ncia do pH",
          aba3Conteudo: [
            "O pH √© crucial em diversas √°reas, como:",
            "- **Biologia**: O pH do sangue humano deve ser mantido entre 7,35 e 7,45 para garantir o funcionamento adequado do organismo.",
            "- **Qu√≠mica**: Determina a reatividade de subst√¢ncias em solu√ß√µes.",
            "- **Meio Ambiente**: O pH da √°gua influencia a vida aqu√°tica e a qualidade da √°gua pot√°vel.",
            "- **Ind√∫stria**: √â usado no controle de qualidade de alimentos, cosm√©ticos e medicamentos.",
          ],
        },
        {
          id: "catalisadores",
          titulo: "‚öóÔ∏è Catalisadores",
          imagem: "https://www.biologianet.com/upload/conteudo/images/2014/12/reacao-com-catalisador.jpg",
          aba1Titulo: "O que s√£o Catalisadores?",
          aba1Conteudo:
            "Catalisadores s√£o subst√¢ncias que aumentam a velocidade das rea√ß√µes qu√≠micas sem serem consumidos no processo. Eles funcionam diminuindo a energia de ativa√ß√£o necess√°ria para a rea√ß√£o ocorrer.",
          aba2Titulo: "Exemplos de Catalisadores",
          aba2Conteudo: [
            "- **Enzimas**: Catalisadores biol√≥gicos que aceleram rea√ß√µes metab√≥licas em organismos vivos. Exemplo: a amilase, que ajuda na digest√£o de carboidratos.",
            "- **Catalisadores Industriais**: Subst√¢ncias usadas em processos qu√≠micos para aumentar a efici√™ncia e reduzir custos. Exemplo: catalisadores usados na produ√ß√£o de am√¥nia pelo processo Haber-Bosch.",
            "- **Catalisadores Automotivos**: Presentes nos conversores catal√≠ticos dos carros, ajudam a reduzir a emiss√£o de gases poluentes.",
          ],
          aba3Titulo: "Import√¢ncia dos Catalisadores",
          aba3Conteudo: [
            "Os catalisadores s√£o fundamentais em diversas √°reas, como:",
            "- **Ind√∫stria Qu√≠mica**: Tornam rea√ß√µes mais r√°pidas e econ√¥micas, reduzindo o consumo de energia.",
            "- **Biologia**: Enzimas catalisam rea√ß√µes essenciais para a vida, como a respira√ß√£o celular.",
            "- **Meio Ambiente**: Catalisadores ajudam a reduzir a polui√ß√£o, como nos conversores catal√≠ticos de ve√≠culos.",
            "- **Medicina**: Enzimas artificiais s√£o usadas em tratamentos m√©dicos e diagn√≥sticos.",
          ],
        },
      ];

function Revolucoes() {
  const navigate = useNavigate();
  const [progresso, setProgresso] = useState({});
  const [grifos, setGrifos] = useState({});
  const [itemAtivo, setItemAtivo] = useState(null); 
  const [progressoTotal, setProgressoTotal] = useState(0);
  const [activeTab, setActiveTab] = useState({});

  useEffect(() => {
    const saved = localStorage.getItem("progresso_reino_plantae");
    if (saved) {
      const savedProgresso = JSON.parse(saved);
      setProgresso(savedProgresso);
    }

    const savedGrifos = localStorage.getItem("grifos_reino_plantae");
    if (savedGrifos) {
      setGrifos(JSON.parse(savedGrifos));
    }

    const initialActiveTabs = {};
    plantaeData.forEach(item => { 
      initialActiveTabs[item.id] = 'aba1'; 
    });
    setActiveTab(initialActiveTabs);

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetElement = document.querySelector(this.getAttribute('href'));
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth'
          });
        }
      });
    });

    atualizarProgressoGeral();
  }, []); 

  useEffect(() => {
    atualizarProgressoGeral();
  }, [progresso]);

  const atualizarProgressoGeral = () => {
    const total = plantaeData.length; 
    const concluidos = Object.values(progresso).filter(value => value === true).length;
    const calculatedProgress = total > 0 ? Math.round((concluidos / total) * 100) : 0;
    setProgressoTotal(calculatedProgress);

  };

  const showNotification = (message, type) => {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.classList.add('show');
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 500);
      }, 2000);
    }, 100);
  };

  const marcarComoConcluido = (id) => {
    const novoProgresso = { ...progresso, [id]: true };
    setProgresso(novoProgresso);
    localStorage.setItem("progresso_reino_plantae", JSON.stringify(novoProgresso)); 
    showNotification('‚úì Conte√∫do marcado como conclu√≠do!', 'success');
  };

  const marcarComoNaoConcluido = (id) => {
    const novoProgresso = { ...progresso, [id]: false };
    setProgresso(novoProgresso);
    localStorage.setItem("progresso_reino_plantae", JSON.stringify(novoProgresso)); 
    showNotification('‚úó Conte√∫do desmarcado como conclu√≠do.', 'info');
  };

  // Ajuste na fun√ß√£o grifarTexto para as novas chaves de aba
  const grifarTexto = (id, abaKey, index) => {
    const grifoKey = `${id}-${abaKey}${index !== undefined ? '-' + index : ''}`;
    const novosGrifos = { ...grifos, [grifoKey]: !grifos[grifoKey] };
    setGrifos(novosGrifos);
    localStorage.setItem("grifos_reino_plantae", JSON.stringify(novosGrifos)); 
  };

  const toggleItemAtivo = (id) => { 
    if (itemAtivo === id) {
      setItemAtivo(null);
    } else {
      setItemAtivo(id);
      setTimeout(() => {
        const element = document.getElementById(id);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 100);
    }
  };

  const handleSobreNos = () => {
    navegate ("/SobreNos");
  };

  const handleLogout = () => {
    alert("Voc√™ saiu com sucesso.");
  };

  const handleTabClick = (itemId, tabName) => { 
    setActiveTab(prev => ({ ...prev, [itemId]: tabName }));
  };

  const voltar = () => {
    navigate('/');
  };

  return (
    <div className="revolucoes-wrapper"> 
      <header className="top-bar">
        <img src={logo} alt="Gabarita Mente" className="logo" />
        <div className="top-buttons">
          <button className="btn" onClick={handleSobreNos}>Sobre N√≥s</button>
          <button className="btn sair" onClick={handleLogout}>Sair</button>
        </div>
      </header>

      <main className="content">
        <div className="top-content">
        <button className="back-button" onClick={voltar}>
          <i className="fas fa-arrow-left" style={{ marginRight: '8px' }}></i> Voltar 
        </button>
        </div>

        <h1 className="titulo-principal">
          <span className="titulo-animado">Explorando o Reino Plantae</span>
          <div className="subtitulo-principal">Descubra o mundo das plantas com o Gabarita Mente!</div>
        </h1>

        <div className="progress-bar-overall">
          <p className="progress-percent-overall">Progresso nesta mat√©ria: {progressoTotal}%</p>
          <div className="progress-fill-overall" style={{ width: `${progressoTotal}%` }}></div>
        </div>

        <div className="revolucoes-nav">
          <div className="nav-buttons">
            {plantaeData.map(item => ( 
              <button
                key={item.id}
                className={`nav-button ${itemAtivo === item.id ? 'active' : ''} ${progresso[item.id] ? 'completed' : ''}`}
                onClick={() => toggleItemAtivo(item.id)} 
              >
                {item.titulo.split(' ')[0]} 
                {progresso[item.id] && <span className="check-icon">‚úì</span>}
              </button>
            ))}
          </div>
        </div>

        <div className="resumo-card">
          <h2 className="resumo-titulo">Resumo do Reino Plantae</h2>
          <p className="resumo-descricao">
            O Reino Plantae, ou Reino Vegetal, engloba uma vasta diversidade de organismos, desde pequenos musgos at√© √°rvores imponentes. S√£o seres eucariontes, pluricelulares e, em sua maioria, aut√≥trofos fotossintetizantes, ou seja, produzem seu pr√≥prio alimento utilizando a luz solar. As plantas s√£o cruciais para a vida na Terra, respons√°veis pela produ√ß√£o de oxig√™nio, servindo como base para in√∫meras cadeias alimentares e fornecendo recursos essenciais para os seres humanos.
          </p>
          <div className="resumo-topics">
            <div className="resumo-topic">
              <h3>Principais Caracter√≠sticas:</h3>
              <ul>
                <li><strong>Eucariontes e Pluricelulares:</strong> C√©lulas com n√∫cleo definido e organiza√ß√£o multicelular.</li>
                <li><strong>Aut√≥trofos Fotossintetizantes:</strong> Produzem seu alimento via fotoss√≠ntese, utilizando clorofila.</li>
                <li><strong>Parede Celular:</strong> Composta principalmente por celulose, conferindo rigidez.</li>
                <li><strong>Reserva Energ√©tica:</strong> Principalmente amido.</li>
                <li><strong>Altern√¢ncia de Gera√ß√µes:</strong> Ciclo de vida com fases gametof√≠tica (n) e esporof√≠tica (2n).</li>
              </ul>
            </div>
            <div className="resumo-topic">
              <h3>Grupos Principais:</h3>
              <ul>
                <li><strong>Bri√≥fitas:</strong> Plantas avasculares (ex: musgos, hep√°ticas).</li>
                <li><strong>Pterid√≥fitas:</strong> Plantas vasculares sem sementes (ex: samambaias, avencas).</li>
                <li><strong>Gimnospermas:</strong> Plantas vasculares com sementes nuas (ex: pinheiros, arauc√°rias).</li>
                <li><strong>Angiospermas:</strong> Plantas vasculares com flores e sementes protegidas por frutos (maioria das plantas).</li>
              </ul>
            </div>
            <div className="resumo-topic">
              <h3>Import√¢ncia Vital:</h3>
                <p>As plantas s√£o a base da vida, produzindo oxig√™nio, alimento, abrigo, medicamentos e regulando o clima. Estudar o Reino Plantae √© entender os fundamentos dos ecossistemas e da nossa pr√≥pria exist√™ncia.</p>
            </div>
          </div>
          <div className="dica-vestibular">
            <h3>Dica para o vestibular:</h3>
            <p>Para o Reino Plantae, foque nas caracter√≠sticas distintivas de cada grupo (Bri√≥fitas, Pterid√≥fitas, Gimnospermas e Angiospermas), seus ciclos reprodutivos (especialmente a altern√¢ncia de gera√ß√µes) e as novidades evolutivas de cada um (vasos condutores, sementes, flores, frutos).</p>
          </div>
        </div>

        {plantaeData.map((item) => ( 
          <section
            key={item.id}
            id={item.id}
            className={`revolucao-box ${itemAtivo === item.id ? 'active' : ''} ${progresso[item.id] ? 'completed' : ''}`}
          >
            <div className="revolucao-header" onClick={() => toggleItemAtivo(item.id)}>
              <h2>{item.titulo}</h2>
              <div className="expand-icon">{itemAtivo === item.id ? '‚àí' : '+'}</div>
            </div>

            {itemAtivo === item.id && (
              <div className="revolucao-content">
                <div className="revolucao-media">
                  <img src={item.imagem} alt={item.titulo} className="revolucao-img" />
                  {progresso[item.id] && <div className="completed-badge">Conclu√≠do</div>}
                </div>

                <div className="revolucao-info">
                  <div className="tabs">
                    <button
                      className={`tab-button ${activeTab[item.id] === 'aba1' ? 'active' : ''}`}
                      onClick={() => handleTabClick(item.id, 'aba1')}
                    >
                      {item.aba1Titulo}
                    </button>
                    <button
                      className={`tab-button ${activeTab[item.id] === 'aba2' ? 'active' : ''}`}
                      onClick={() => handleTabClick(item.id, 'aba2')}
                    >
                      {item.aba2Titulo}
                    </button>
                    <button
                      className={`tab-button ${activeTab[item.id] === 'aba3' ? 'active' : ''}`}
                      onClick={() => handleTabClick(item.id, 'aba3')}
                    >
                      {item.aba3Titulo}
                    </button>
                  </div>

                  {/* Conte√∫do da Aba 1 */}
                  <div className={`tab-content ${activeTab[item.id] === 'aba1' ? 'active' : ''}`}>
                    <h3>{item.aba1Titulo}</h3>
                    <p
                      className={`revolucao-descricao ${grifos[`${item.id}-aba1`] ? 'grifado' : ''}`}
                      onClick={() => grifarTexto(item.id, 'aba1')}
                    >
                      {item.aba1Conteudo}
                    </p>
                  </div>

                  <div className={`tab-content ${activeTab[item.id] === 'aba2' ? 'active' : ''}`}>
                    <h3>{item.aba2Titulo}</h3>
                    <ul className="revolucao-lista">
                      {Array.isArray(item.aba2Conteudo) ? item.aba2Conteudo.map((conteudoItem, index) => (
                        <li
                          key={index}
                          className={grifos[`${item.id}-aba2-${index}`] ? 'grifado' : ''}
                          onClick={() => grifarTexto(item.id, 'aba2', index)}
                        >
                          {conteudoItem}
                        </li>
                      )) : <p className={grifos[`${item.id}-aba2`] ? 'grifado' : ''} onClick={() => grifarTexto(item.id, 'aba2')}>{item.aba2Conteudo}</p> }
                    </ul>
                  </div>

                  <div className={`tab-content ${activeTab[item.id] === 'aba3' ? 'active' : ''}`}>
                    <h3>{item.aba3Titulo}</h3>
                     <ul className="revolucao-lista">
                      {Array.isArray(item.aba3Conteudo) ? item.aba3Conteudo.map((conteudoItem, index) => (
                        <li
                          key={index}
                          className={grifos[`${item.id}-aba3-${index}`] ? 'grifado' : ''}
                          onClick={() => grifarTexto(item.id, 'aba3', index)}
                        >
                          {conteudoItem}
                        </li>
                      )) : <p className={grifos[`${item.id}-aba3`] ? 'grifado' : ''} onClick={() => grifarTexto(item.id, 'aba3')}>{item.aba3Conteudo}</p> }
                    </ul>
                  </div>
                  
                  <div className="dica-box">
                    <h4>Aten√ß√£o!</h4>
                    <p>Este grupo de plantas √© frequentemente cobrado em provas, especialmente suas caracter√≠sticas distintivas e novidades evolutivas.</p>
                  </div>

                  <div className="revolucao-actions">
                    <button
                      className={`btn-concluir ${progresso[item.id] ? 'concluido' : ''}`}
                      onClick={() => marcarComoConcluido(item.id)}
                      disabled={progresso[item.id]}
                    >
                      {progresso[item.id] ? "Conte√∫do Conclu√≠do" : "Marcar como Conclu√≠do"}
                    </button>
                    {progresso[item.id] && (
                      <button
                        className="btn-remover-concluido"
                        onClick={() => marcarComoNaoConcluido(item.id)}
                      >Remover Conclus√£o
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}
          </section>
        ))}

        <button className="back-to-top" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>
          <i className="fas fa-arrow-up"></i>
        </button>
      </main>

      <footer className="footer">
        <div className="footer-content">
          <div className="footer-links">
            <ul>
              <li><span onClick={voltar}>P√°gina Inicial</span></li>
            </ul>
          </div>
        </div>
        <div className="footer-bottom">
          <p>&copy; 2025 Gabarita Mente - Todos os direitos reservados</p>
        </div>
      </footer>
    </div>
  );
}

export default Revolucoes; 