import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import logo from "../../assets/logo.png"; 
import "../css/Reacoes.css"; 
import "../Quimica.jsx"; 

const plantaeData = [
  {
    id: "reacao-neutralizacao",
    titulo: "‚öóÔ∏è Rea√ß√£o de Neutraliza√ß√£o",
    imagem: "hhttps://blogdoenem.com.br/wp-content/uploads/2015/05/rea%C3%A7%C3%A3o-de-neutraliza%C3%A7%C3%A3o-fonte-saber-enem-1.jpg",
    aba1Titulo: "O que √©?",
    aba1Conteudo:
      "A rea√ß√£o de neutraliza√ß√£o ocorre quando um √°cido reage com uma base, formando √°gua e um sal. Esse tipo de rea√ß√£o √© amplamente utilizado no cotidiano e em processos industriais, como na produ√ß√£o de medicamentos e no tratamento de √°gua.",
    aba2Titulo: "Exemplo Pr√°tico",
    aba2Conteudo: [
      "Um exemplo cl√°ssico √© a rea√ß√£o entre √°cido clor√≠drico (HCl) e hidr√≥xido de s√≥dio (NaOH):",
      "HCl + NaOH ‚Üí NaCl + H‚ÇÇO",
      "Aqui, o √°cido clor√≠drico reage com a base hidr√≥xido de s√≥dio para formar cloreto de s√≥dio (sal de cozinha) e √°gua.",
    ],
    aba3Titulo: "Import√¢ncia",
    aba3Conteudo: [
      "Neutraliza√ß√£o √© usada no tratamento de efluentes industriais para ajustar o pH.",
      "√â essencial na fabrica√ß√£o de anti√°cidos, que neutralizam o excesso de √°cido no est√¥mago.",
      "Tamb√©m √© aplicada na agricultura para corrigir a acidez do solo.",
    ],
  },
  {
    id: "reacao-redox",
    titulo: "üîã Rea√ß√£o de Oxida√ß√£o-Redu√ß√£o (Redox)",
    imagem: "https://static.todamateria.com.br/upload/ox/ir/oxirreducao-cke.jpg",
    aba1Titulo: "O que √©?",
    aba1Conteudo:
      "As rea√ß√µes redox envolvem a transfer√™ncia de el√©trons entre subst√¢ncias. Elas s√£o fundamentais em processos biol√≥gicos e industriais.",
    aba2Titulo: "Conceitos B√°sicos",
    aba2Conteudo: [
      "**Oxida√ß√£o:** Perda de el√©trons por uma subst√¢ncia.",
      "**Redu√ß√£o:** Ganho de el√©trons por uma subst√¢ncia.",
      "Esses processos ocorrem simultaneamente, pois os el√©trons perdidos por uma subst√¢ncia s√£o ganhos por outra.",
    ],
    aba3Titulo: "Exemplo e Aplica√ß√µes",
    aba3Conteudo: [
      "Exemplo: Na forma√ß√£o de ferrugem, o ferro (Fe) perde el√©trons (oxida) e o oxig√™nio (O‚ÇÇ) ganha el√©trons (reduz).",
      "Rea√ß√µes redox s√£o essenciais na respira√ß√£o celular, onde a glicose √© oxidada para liberar energia.",
      "Tamb√©m s√£o usadas em baterias, como as de √≠on-l√≠tio, e na produ√ß√£o de energia el√©trica.",
    ],
  },
  {
    id: "reacao-combustao",
    titulo: "üî• Rea√ß√£o de Combust√£o",
    imagem: "https://static.manualdaquimica.com/2024/10/exemplo-de-reacao-de-combustao.jpg",
    aba1Titulo: "O que √©?",
    aba1Conteudo:
      "A combust√£o √© uma rea√ß√£o qu√≠mica r√°pida entre uma subst√¢ncia (geralmente um combust√≠vel org√¢nico) e o oxig√™nio, liberando energia em forma de calor e luz.",
    aba2Titulo: "Exemplo Pr√°tico",
    aba2Conteudo: [
      "Um exemplo comum √© a combust√£o do metano (CH‚ÇÑ):",
      "CH‚ÇÑ + 2O‚ÇÇ ‚Üí CO‚ÇÇ + 2H‚ÇÇO + energia",
      "Aqui, o metano reage com oxig√™nio para formar di√≥xido de carbono, √°gua e liberar energia.",
    ],
    aba3Titulo: "Import√¢ncia",
    aba3Conteudo: [
      "A combust√£o √© a base do funcionamento de motores de combust√£o interna, como os de carros e avi√µes.",
      "√â usada para gerar energia el√©trica em usinas termel√©tricas.",
      "Tamb√©m √© essencial em processos industriais, como a queima de combust√≠veis f√≥sseis para aquecimento.",
    ],
  },
  {
    id: "reacao-precipitacao",
    titulo: "üíß Rea√ß√£o de Precipita√ß√£o",
    imagem: "https://slideplayer.com.br/slide/3136082/11/images/5/Rea%C3%A7%C3%A3o+de+Precipita%C3%A7%C3%A3o.jpg",
    aba1Titulo: "O que √©?",
    aba1Conteudo:
      "A rea√ß√£o de precipita√ß√£o ocorre quando dois sais em solu√ß√£o aquosa reagem, formando um produto insol√∫vel chamado precipitado, que se separa da solu√ß√£o.",
    aba2Titulo: "Exemplo Pr√°tico",
    aba2Conteudo: [
      "Ao misturar solu√ß√µes de nitrato de prata (AgNO‚ÇÉ) e cloreto de s√≥dio (NaCl), forma-se cloreto de prata (AgCl), um s√≥lido branco insol√∫vel:",
      "AgNO‚ÇÉ + NaCl ‚Üí AgCl‚Üì + NaNO‚ÇÉ",
      "O s√≠mbolo '‚Üì' indica que o cloreto de prata √© o precipitado.",
    ],
    aba3Titulo: "Aplica√ß√µes",
    aba3Conteudo: [
      "Rea√ß√µes de precipita√ß√£o s√£o usadas na purifica√ß√£o de √°gua, removendo √≠ons indesejados.",
      "S√£o aplicadas na an√°lise qualitativa para identificar a presen√ßa de certos √≠ons em uma solu√ß√£o.",
      "Tamb√©m s√£o usadas na fabrica√ß√£o de pigmentos e na ind√∫stria farmac√™utica.",
    ],
  },
];

function Revolucoes() {
  const navigate = useNavigate();
  const [progresso, setProgresso] = useState({});
  const [grifos, setGrifos] = useState({});
  const [itemAtivo, setItemAtivo] = useState(null); 
  const [progressoTotal, setProgressoTotal] = useState(0);
  const [activeTab, setActiveTab] = useState({});

  useEffect(() => {
    const saved = localStorage.getItem("progresso_reino_plantae");
    if (saved) {
      const savedProgresso = JSON.parse(saved);
      setProgresso(savedProgresso);
    }

    const savedGrifos = localStorage.getItem("grifos_reino_plantae");
    if (savedGrifos) {
      setGrifos(JSON.parse(savedGrifos));
    }

    const initialActiveTabs = {};
    plantaeData.forEach(item => { 
      initialActiveTabs[item.id] = 'aba1'; 
    });
    setActiveTab(initialActiveTabs);

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetElement = document.querySelector(this.getAttribute('href'));
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth'
          });
        }
      });
    });

    atualizarProgressoGeral();
  }, []); 

  useEffect(() => {
    atualizarProgressoGeral();
  }, [progresso]);

  const atualizarProgressoGeral = () => {
    const total = plantaeData.length; 
    const concluidos = Object.values(progresso).filter(value => value === true).length;
    const calculatedProgress = total > 0 ? Math.round((concluidos / total) * 100) : 0;
    setProgressoTotal(calculatedProgress);

  };

  const showNotification = (message, type) => {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.classList.add('show');
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 500);
      }, 2000);
    }, 100);
  };

  const marcarComoConcluido = (id) => {
    const novoProgresso = { ...progresso, [id]: true };
    setProgresso(novoProgresso);
    localStorage.setItem("progresso_reino_plantae", JSON.stringify(novoProgresso)); 
    showNotification('‚úì Conte√∫do marcado como conclu√≠do!', 'success');
  };

  const marcarComoNaoConcluido = (id) => {
    const novoProgresso = { ...progresso, [id]: false };
    setProgresso(novoProgresso);
    localStorage.setItem("progresso_reino_plantae", JSON.stringify(novoProgresso)); 
    showNotification('‚úó Conte√∫do desmarcado como conclu√≠do.', 'info');
  };

  // Ajuste na fun√ß√£o grifarTexto para as novas chaves de aba
  const grifarTexto = (id, abaKey, index) => {
    const grifoKey = `${id}-${abaKey}${index !== undefined ? '-' + index : ''}`;
    const novosGrifos = { ...grifos, [grifoKey]: !grifos[grifoKey] };
    setGrifos(novosGrifos);
    localStorage.setItem("grifos_reino_plantae", JSON.stringify(novosGrifos)); 
  };

  const toggleItemAtivo = (id) => { 
    if (itemAtivo === id) {
      setItemAtivo(null);
    } else {
      setItemAtivo(id);
      setTimeout(() => {
        const element = document.getElementById(id);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 100);
    }
  };

  const handleSobreNos = () => {
    navegate ("/SobreNos");
  };

  const handleLogout = () => {
    alert("Voc√™ saiu com sucesso.");
  };

  const handleTabClick = (itemId, tabName) => { 
    setActiveTab(prev => ({ ...prev, [itemId]: tabName }));
  };

  const voltar = () => {
    navigate('/');
  };

  return (
    <div className="revolucoes-wrapper"> 
      <header className="top-bar">
        <img src={logo} alt="Gabarita Mente" className="logo" />
        <div className="top-buttons">
          <button className="btn" onClick={handleSobreNos}>Sobre N√≥s</button>
          <button className="btn sair" onClick={handleLogout}>Sair</button>
        </div>
      </header>

      <main className="content">
        <div className="top-content">
        <button className="back-button" onClick={voltar}>
          <i className="fas fa-arrow-left" style={{ marginRight: '8px' }}></i> Voltar 
        </button>
        </div>

        <h1 className="titulo-principal">
          <span className="titulo-animado">Explorando o Reino Plantae</span>
          <div className="subtitulo-principal">Descubra o mundo das plantas com o Gabarita Mente!</div>
        </h1>

        <div className="progress-bar-overall">
          <p className="progress-percent-overall">Progresso nesta mat√©ria: {progressoTotal}%</p>
          <div className="progress-fill-overall" style={{ width: `${progressoTotal}%` }}></div>
        </div>

        <div className="revolucoes-nav">
          <div className="nav-buttons">
            {plantaeData.map(item => ( 
              <button
                key={item.id}
                className={`nav-button ${itemAtivo === item.id ? 'active' : ''} ${progresso[item.id] ? 'completed' : ''}`}
                onClick={() => toggleItemAtivo(item.id)} 
              >
                {item.titulo.split(' ')[0]} 
                {progresso[item.id] && <span className="check-icon">‚úì</span>}
              </button>
            ))}
          </div>
        </div>

        <div className="resumo-card">
          <h2 className="resumo-titulo">Resumo do Reino Plantae</h2>
          <p className="resumo-descricao">
            O Reino Plantae, ou Reino Vegetal, engloba uma vasta diversidade de organismos, desde pequenos musgos at√© √°rvores imponentes. S√£o seres eucariontes, pluricelulares e, em sua maioria, aut√≥trofos fotossintetizantes, ou seja, produzem seu pr√≥prio alimento utilizando a luz solar. As plantas s√£o cruciais para a vida na Terra, respons√°veis pela produ√ß√£o de oxig√™nio, servindo como base para in√∫meras cadeias alimentares e fornecendo recursos essenciais para os seres humanos.
          </p>
          <div className="resumo-topics">
            <div className="resumo-topic">
              <h3>Principais Caracter√≠sticas:</h3>
              <ul>
                <li><strong>Eucariontes e Pluricelulares:</strong> C√©lulas com n√∫cleo definido e organiza√ß√£o multicelular.</li>
                <li><strong>Aut√≥trofos Fotossintetizantes:</strong> Produzem seu alimento via fotoss√≠ntese, utilizando clorofila.</li>
                <li><strong>Parede Celular:</strong> Composta principalmente por celulose, conferindo rigidez.</li>
                <li><strong>Reserva Energ√©tica:</strong> Principalmente amido.</li>
                <li><strong>Altern√¢ncia de Gera√ß√µes:</strong> Ciclo de vida com fases gametof√≠tica (n) e esporof√≠tica (2n).</li>
              </ul>
            </div>
            <div className="resumo-topic">
              <h3>Grupos Principais:</h3>
              <ul>
                <li><strong>Bri√≥fitas:</strong> Plantas avasculares (ex: musgos, hep√°ticas).</li>
                <li><strong>Pterid√≥fitas:</strong> Plantas vasculares sem sementes (ex: samambaias, avencas).</li>
                <li><strong>Gimnospermas:</strong> Plantas vasculares com sementes nuas (ex: pinheiros, arauc√°rias).</li>
                <li><strong>Angiospermas:</strong> Plantas vasculares com flores e sementes protegidas por frutos (maioria das plantas).</li>
              </ul>
            </div>
            <div className="resumo-topic">
              <h3>Import√¢ncia Vital:</h3>
                <p>As plantas s√£o a base da vida, produzindo oxig√™nio, alimento, abrigo, medicamentos e regulando o clima. Estudar o Reino Plantae √© entender os fundamentos dos ecossistemas e da nossa pr√≥pria exist√™ncia.</p>
            </div>
          </div>
          <div className="dica-vestibular">
            <h3>Dica para o vestibular:</h3>
            <p>Para o Reino Plantae, foque nas caracter√≠sticas distintivas de cada grupo (Bri√≥fitas, Pterid√≥fitas, Gimnospermas e Angiospermas), seus ciclos reprodutivos (especialmente a altern√¢ncia de gera√ß√µes) e as novidades evolutivas de cada um (vasos condutores, sementes, flores, frutos).</p>
          </div>
        </div>

        {plantaeData.map((item) => ( 
          <section
            key={item.id}
            id={item.id}
            className={`revolucao-box ${itemAtivo === item.id ? 'active' : ''} ${progresso[item.id] ? 'completed' : ''}`}
          >
            <div className="revolucao-header" onClick={() => toggleItemAtivo(item.id)}>
              <h2>{item.titulo}</h2>
              <div className="expand-icon">{itemAtivo === item.id ? '‚àí' : '+'}</div>
            </div>

            {itemAtivo === item.id && (
              <div className="revolucao-content">
                <div className="revolucao-media">
                  <img src={item.imagem} alt={item.titulo} className="revolucao-img" />
                  {progresso[item.id] && <div className="completed-badge">Conclu√≠do</div>}
                </div>

                <div className="revolucao-info">
                  <div className="tabs">
                    <button
                      className={`tab-button ${activeTab[item.id] === 'aba1' ? 'active' : ''}`}
                      onClick={() => handleTabClick(item.id, 'aba1')}
                    >
                      {item.aba1Titulo}
                    </button>
                    <button
                      className={`tab-button ${activeTab[item.id] === 'aba2' ? 'active' : ''}`}
                      onClick={() => handleTabClick(item.id, 'aba2')}
                    >
                      {item.aba2Titulo}
                    </button>
                    <button
                      className={`tab-button ${activeTab[item.id] === 'aba3' ? 'active' : ''}`}
                      onClick={() => handleTabClick(item.id, 'aba3')}
                    >
                      {item.aba3Titulo}
                    </button>
                  </div>

                  {/* Conte√∫do da Aba 1 */}
                  <div className={`tab-content ${activeTab[item.id] === 'aba1' ? 'active' : ''}`}>
                    <h3>{item.aba1Titulo}</h3>
                    <p
                      className={`revolucao-descricao ${grifos[`${item.id}-aba1`] ? 'grifado' : ''}`}
                      onClick={() => grifarTexto(item.id, 'aba1')}
                    >
                      {item.aba1Conteudo}
                    </p>
                  </div>

                  <div className={`tab-content ${activeTab[item.id] === 'aba2' ? 'active' : ''}`}>
                    <h3>{item.aba2Titulo}</h3>
                    <ul className="revolucao-lista">
                      {Array.isArray(item.aba2Conteudo) ? item.aba2Conteudo.map((conteudoItem, index) => (
                        <li
                          key={index}
                          className={grifos[`${item.id}-aba2-${index}`] ? 'grifado' : ''}
                          onClick={() => grifarTexto(item.id, 'aba2', index)}
                        >
                          {conteudoItem}
                        </li>
                      )) : <p className={grifos[`${item.id}-aba2`] ? 'grifado' : ''} onClick={() => grifarTexto(item.id, 'aba2')}>{item.aba2Conteudo}</p> }
                    </ul>
                  </div>

                  <div className={`tab-content ${activeTab[item.id] === 'aba3' ? 'active' : ''}`}>
                    <h3>{item.aba3Titulo}</h3>
                     <ul className="revolucao-lista">
                      {Array.isArray(item.aba3Conteudo) ? item.aba3Conteudo.map((conteudoItem, index) => (
                        <li
                          key={index}
                          className={grifos[`${item.id}-aba3-${index}`] ? 'grifado' : ''}
                          onClick={() => grifarTexto(item.id, 'aba3', index)}
                        >
                          {conteudoItem}
                        </li>
                      )) : <p className={grifos[`${item.id}-aba3`] ? 'grifado' : ''} onClick={() => grifarTexto(item.id, 'aba3')}>{item.aba3Conteudo}</p> }
                    </ul>
                  </div>
                  
                  <div className="dica-box">
                    <h4>Aten√ß√£o!</h4>
                    <p>Este grupo de plantas √© frequentemente cobrado em provas, especialmente suas caracter√≠sticas distintivas e novidades evolutivas.</p>
                  </div>

                  <div className="revolucao-actions">
                    <button
                      className={`btn-concluir ${progresso[item.id] ? 'concluido' : ''}`}
                      onClick={() => marcarComoConcluido(item.id)}
                      disabled={progresso[item.id]}
                    >
                      {progresso[item.id] ? "Conte√∫do Conclu√≠do" : "Marcar como Conclu√≠do"}
                    </button>
                    {progresso[item.id] && (
                      <button
                        className="btn-remover-concluido"
                        onClick={() => marcarComoNaoConcluido(item.id)}
                      >Remover Conclus√£o
                      </button>
                    )}
                  </div>
                </div>
              </div>
            )}
          </section>
        ))}

        <button className="back-to-top" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>
          <i className="fas fa-arrow-up"></i>
        </button>
      </main>

      <footer className="footer">
        <div className="footer-content">
          <div className="footer-links">
            <ul>
              <li><span onClick={voltar}>P√°gina Inicial</span></li>
            </ul>
          </div>
        </div>
        <div className="footer-bottom">
          <p>&copy; 2025 Gabarita Mente - Todos os direitos reservados</p>
        </div>
      </footer>
    </div>
  );
}

export default Revolucoes; 